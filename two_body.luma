struct Body {};

/*
 * F = (G m_1 m_2) / r^2 by Newton's law of gravitation
 *
 * r_v = - ((1 + q) / r^2) * r_h
 *
 */

struct ForceVector {
    var x: std::f64;
    var y: std::f64;
};

fn grav_from(on: usr::Body, from: std::Vec<Body>) -> usr::ForceVector {
    for ( let i = 0; i < from.len(); i = i + 1 ) {
        // do newton stuff
    };

    struct usr::ForceVector { x: 0.0, y: 0.0 }
};

fn distance_between(a: usr::Body, b: usr::Body) -> std::f64 {
    let delta_x = a.x - b.x;
    let delta_y = a.y - b.y;
    (delta_x.pow(2.0) + delta_y.pow(2.0)).sqrt()
};

fn generate_body(x: std::f64, y: std::f64, mass: std::f64) -> Body {
    let b = struct Body {};

    b.x = x;
    b.y = y;
    b.mass = mass;

    b.v_x = std::cosine(x);
    b.v_y = std::cosine(y); // just almost random

    b
};

struct Simulation {
    var bodies: std::Vec<usr::Body>;
};

fn simulate_nbody(s: usr::Simulation) {
    let bodies = s.bodies;
    for (let sample = 0; sample < s.samples; sample = sample + 1) {
        for (let i = 0; i < bodies.len(); i = i + 1) {

            let cur_body = bodies.get(i);

            let other_bodies = std::Vec::new();

            for (let j = 0; i < bodies.len(); j = j + 1) {
                if i != j {
                    other_bodies.push(bodies.get(j));
                }
            };
            
            //let fv = struct ForceVector { x: 0.0, y: 0.0 };
            let fv = usr::grav_from(cur_body, other_bodies);

            cur_body.v_x = cur_body.v_x + (fv.x / cur_body.mass); // f = ma, a = f / m
            cur_body.v_y = cur_body.v_y + (fv.y / cur_body.mass);

            cur_body.x = cur_body.x + (cur_body.v_x * s.step_time);
            cur_body.y = cur_body.y + (cur_body.v_y * s.step_time);
        };
    };
};

fn main() {
    let b1 = usr::generate_body(10.0, 20.0, 5.0);
    let b2 = usr::generate_body(30.0, 10.0, 3.0);
    let b3 = usr::generate_body(0.0, 10.0, 1.0);

    let b = std::Vec::new();

    b.push(b1);
    //bodies.push(b2);
    //bodies.push(b3);

    let s = struct usr::Simulation { bodies: b };

    s.samples = 1000;
    s.step_time = 0.1;

    usr::simulate_nbody(s);
}
