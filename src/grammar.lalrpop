use std::str::FromStr;
use crate::helper::lex_wrap::ParseResultError;
use crate::parse_expr::LALRPopToken;
use crate::ast;
use crate::ast::ComparisonOperation;
use crate::ast::BinaryOperation;
use crate::ast::UnaryOperation;
use crate::ast::Expression;


grammar<'input>(input: &'input str);

extern {
    type Location = usize;
    type Error = ParseResultError<'input>;

    enum LALRPopToken<'input> {
        Identifier => LALRPopToken::Identifier(<&'input str>),
        UnknownIntegerLiteral => LALRPopToken::UnknownIntegerLiteral(<&'input str>),
        

        Public => LALRPopToken::Public,
        If => LALRPopToken::If,
        As => LALRPopToken::As,
        Else => LALRPopToken::Else,
        For => LALRPopToken::For,
        While => LALRPopToken::While,
        Semicolon => LALRPopToken::Semicolon,
        RBrace => LALRPopToken::RBrace,
        LBrace => LALRPopToken::LBrace,
        RBracket => LALRPopToken::RBracket,
        LBracket => LALRPopToken::LBracket,
        RParen => LALRPopToken::RParen,
        LParen => LALRPopToken::LParen,
        Asterisk => LALRPopToken::Asterisk,
        FSlash => LALRPopToken::FSlash,
        Dash => LALRPopToken::Dash,
        Plus => LALRPopToken::Plus,
        Equals => LALRPopToken::Equals,
        CmpEqual => LALRPopToken::CmpEqual,
        CmpLessThan => LALRPopToken::CmpLessThan,
        CmpGreaterThan => LALRPopToken::CmpGreaterThan,
        CmpLessThanOrEqual => LALRPopToken::CmpLessThanOrEqual,
        CmpGreaterThanOrEqual => LALRPopToken::CmpGreaterThanOrEqual,
        Bang => LALRPopToken::Bang,
        Pipe => LALRPopToken::Pipe,
        Dot => LALRPopToken::Dot,
    }
}

pub OuterExpression: Box<Expression<'input>> = {
    <ae: AssignmentExpression> => ae,
    <ce: ComparisonExpression> => ce,
}

AssignmentExpression: Box<Expression<'input>> = {
    <lhs: VariableAccess> Equals <oe: OuterExpression> =>
        Box::new(Expression::Assignment(ast::AssignmentExpression { lhs, rhs: oe })),
}

ComparisonExpression: Box<Expression<'input>> = {
    <lhs: ComparisonExpression> CmpEqual <rhs: AdditiveExpression> =>
        Box::new(Expression::Comparison(ast::ComparisonOperationExpression { lhs, rhs, operation: ComparisonOperation::Equal })),
    <lhs: ComparisonExpression> CmpLessThan <rhs: AdditiveExpression> =>
        Box::new(Expression::Comparison(ast::ComparisonOperationExpression { lhs, rhs, operation: ComparisonOperation::LessThan })),
    <lhs: ComparisonExpression> CmpGreaterThan <rhs: AdditiveExpression> =>
        Box::new(Expression::Comparison(ast::ComparisonOperationExpression { lhs, rhs, operation: ComparisonOperation::GreaterThan })),
    <lhs: ComparisonExpression> CmpLessThanOrEqual <rhs: AdditiveExpression> =>
        Box::new(Expression::Comparison(ast::ComparisonOperationExpression { lhs, rhs, operation: ComparisonOperation::LessThanOrEqual })),
    <lhs: ComparisonExpression> CmpGreaterThanOrEqual <rhs: AdditiveExpression> =>
        Box::new(Expression::Comparison(ast::ComparisonOperationExpression { lhs, rhs, operation: ComparisonOperation::GreaterThanOrEqual })),
    <ae: AdditiveExpression> => ae,
}

AdditiveExpression: Box<Expression<'input>> = {
    <lhs: AdditiveExpression> Plus <rhs: MultiplicativeExpression> =>
        Box::new(Expression::BinaryOperation(ast::BinaryOperationExpression { lhs, rhs, operation: BinaryOperation::Add })),
    <lhs: AdditiveExpression> Dash <rhs: MultiplicativeExpression> =>
        Box::new(Expression::BinaryOperation(ast::BinaryOperationExpression { lhs, rhs, operation: BinaryOperation::Subtract })),
    <me: MultiplicativeExpression> => me,
}

MultiplicativeExpression: Box<Expression<'input>> = {
    <lhs: MultiplicativeExpression> Asterisk <rhs: UnaryExpression> =>
        Box::new(Expression::BinaryOperation(ast::BinaryOperationExpression { lhs, rhs, operation: BinaryOperation::Multiply })),
    <lhs: MultiplicativeExpression> FSlash <rhs: UnaryExpression> =>
        Box::new(Expression::BinaryOperation(ast::BinaryOperationExpression { lhs, rhs, operation: BinaryOperation::Divide })),
    <ue: UnaryExpression> => ue,
}

UnaryExpression: Box<Expression<'input>> = {
    Dash <subexpr: UnaryExpression> =>
        Box::new(Expression::UnaryOperation(ast::UnaryOperationExpression { subexpr, operation: UnaryOperation::Negate })),
    Bang <subexpr: UnaryExpression> =>
        Box::new(Expression::UnaryOperation(ast::UnaryOperationExpression { subexpr, operation: UnaryOperation::Invert })),
    Asterisk <subexpr: UnaryExpression> =>
        Box::new(Expression::UnaryOperation(ast::UnaryOperationExpression { subexpr, operation: UnaryOperation::Dereference })),
    <ce: CastExpression> => ce,
}

CastExpression: Box<Expression<'input>> = {
    <ae: AtomicExpression> => ae,
    <ae: AtomicExpression> As <id: Identifier> => {
        let tr = Box::new(ast::TypeReference { failed: false, typename: id, refers_to: None });
        Box::new(Expression::Cast(ast::CastExpression { subexpr: ae, typeref: tr }))
    }
}

AtomicExpression: Box<Expression<'input>> = {
    <pe: ParentheticalExpression> => pe,
    <va: VariableAccess> => va,
    <le: LiteralExpression> => le,
}

ParentheticalExpression: Box<Expression<'input>> = {
    LParen <oe: OuterExpression> RParen => oe,
}

VariableAccess: Box<Expression<'input>> = {
    Identifier => Box::new(Expression::Identifier(ast::IdentifierExpression { name: <>, node_type: None })),
}

LiteralExpression: Box<Expression<'input>> = {
    UnknownIntegerLiteral => Box::new(Expression::IntegerLiteral(ast::IntegerLiteralExpression { contents: <> })),
}
