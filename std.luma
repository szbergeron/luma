struct i64 noref #builtin "i64" {
    fn operator[_*_](self: std::i64 isref, other: std::i64 isref) -> std::i64 
        #builtin "$self * $other" "luma_i64_op_mul_silly($self, $other)" "luma_op_mul_slow($self, $other)"

    fn operator[_+_](self: std::i64 isref, other: std::i64 isref) -> std::i64
        #builtin "$self + $other" "luma_i64_op_add_silly($self, $other)" "luma_op_add_slow($self, $other)"

    fn operator[_-_](self: std::i64 isref, other: std::i64 isref) -> std::i64
        #builtin "$self - $other" "luma_i64_op_subtract_silly($self, $other)" "luma_op_subtract_slow($self, $other)"

    fn operator[_==_](self: std::i64 isref, other: std::i64 isref) -> std::bool
        #builtin "$self == $other" "luma_i64_op_eq_silly($self, $other)" "luma_op_eq_slow($self, $other)"

    fn operator[_!=_](self: std::i64 isref, other: std::i64 isref) -> std::bool
        #builtin "$self != $other" "luma_i64_op_eq_silly($self, $other)" "luma_op_eq_slow($self, $other)"

    fn operator[_<_](self: std::i64 isref, other: std::i64 isref) -> std::bool
        #builtin "$self < $other" "luma_i64_op_lt_silly($self, $other)" "luma_op_lt_slow($self, $other)"

    fn operator[_>_](self: std::i64 isref, other: std::i64 isref) -> std::bool
        #builtin "$self > $other" "luma_i64_op_gt_silly($self, $other)" "luma_op_gt_slow($self, $other)"

    fn operator[_>=_](self: std::i64 isref, other: std::i64 isref) -> std::bool
        #builtin "$self >= $other" "luma_i64_op_gt_silly($self, $other)" "todo!()"

    fn to_string(self: std::i64 isref) -> std::String
        #builtin "$self.to_string()" "" "luma_to_string_slow($self)"

    fn rand() -> i64 #builtin "rand_i64()" "" "luma_i64_rand_slow()"

    fn abs(self: i64 isref) -> i64 #builtin "$self.abs()" "" "unreachable!()"

    fn modulo(self: std::i64 isref, modby: std::i64 isref) -> std::i64
        #builtin "$self % $modby" "" "luma_op_modulo_slow($self, $modby)"
}


struct f64 noref #builtin "f64" {
    fn operator[_*_](self: std::f64, other: std::f64) -> std::f64 
        #builtin "$self * $other" "luma_i64_op_mul_silly($self, $other)" "luma_op_mul_slow($self, $other)";

    fn operator[_+_](self: std::f64, other: std::f64) -> std::f64
        #builtin "$self + $other" "luma_i64_op_add_silly($self, $other)" "luma_op_add_slow($self, $other)";

    fn operator[_-_](self: std::f64, other: std::f64) -> std::f64
        #builtin "$self - $other" "luma_i64_op_subtract_silly($self, $other)" "luma_op_subtract_slow($self, $other)";

    fn operator[_/_](self: std::f64, other: std::f64) -> std::f64
        #builtin "$self / $other" "luma_i64_op_subtract_silly($self, $other)" "luma_op_subtract_slow($self, $other)";

    fn operator[_==_](self: std::f64, other: std::f64) -> std::bool
        #builtin "$self == $other" "luma_i64_op_eq_silly($self, $other)" "luma_op_eq_slow($self, $other)";

    fn operator[_!=_](self: std::f64, other: std::f64) -> std::bool
        #builtin "$self != $other" "luma_i64_op_eq_silly($self, $other)" "luma_op_eq_slow($self, $other)";

    fn operator[_<_](self: std::f64, other: std::f64) -> std::bool
        #builtin "$self < $other" "luma_i64_op_lt_silly($self, $other)" "luma_op_lt_slow($self, $other)";

    fn operator[_>_](self: std::f64, other: std::f64) -> std::bool
        #builtin "$self > $other" "luma_i64_op_gt_silly($self, $other)" "luma_op_gt_slow($self, $other)";

    fn operator[_>=_](self: std::f64, other: std::f64) -> std::bool
        #builtin "$self >= $other" "luma_i64_op_gte_silly($self, $other)" "luma_op_gte_slow($self, $other)";

    fn to_string(self: std::f64) -> std::String
        #builtin "$self.to_string()" "" "luma_to_string_slow($self)";

    fn pow(self: std::f64, p: std::f64) -> std::f64
        #builtin "$self.powf($p)" "" "unreachable!()";

    fn sqrt(self: std::f64) -> std::f64
        #builtin "$self.sqrt()" "" "unreachable!()";

    fn abs(self: std::f64) -> std::f64 #builtin "$self.abs()" "" "unreachable!()";

    fn operator[-_](self: std::f64) -> std::f64 #builtin "-$self" "" "unreachable!()";

    fn modulo(self: std::f64, modby: std::f64) -> std::f64
        #builtin "$self % $modby" "" "luma_op_modulo_slow($self, $modby)";

    fn rand() -> std::f64 #builtin "rand_f64()" "" "luma_f64_rand_slow()";

    
    fn inf() -> std::f64 #builtin "f64::INFINITY" "" "Value::F64(f64::INFINITY, FLOAT_OBJ.clone())";

    fn cos(self: std::f64) -> std::f64 {
        std::cosine(self)
    };

    fn ffloor(self: std::f64) -> std::f64 {
        if self < 0.0 {
            0.0
        } else {
            self
        }
    };
}

struct Time noref #builtin "std::time::Instant" {
    fn now() -> Time #builtin "std::time::Instant::now()" "" "luma_instant_new_slow()";

    fn operator[_-_](self: Time, other: Time) -> Duration #builtin "$self - $other" "" "luma_op_subtract_slow($self, $other)";
}

struct Duration noref #builtin "std::time::Duration" {
    fn print(self: Duration, msg: String) #builtin "luma_print_dur($self, $msg)" "" "luma_print_slow($self)";
}

struct bool noref #builtin "bool" {
    fn operator[_==_](self: std::bool, other: std::bool) -> std::bool
        #builtin
            "$self == $other"
            "luma__silly_bool_compare_eq"
            "luma_op_eq_slow($self, $other)"

    fn operator[_&&_](self: bool, other:bool) -> bool
        #builtin
            "$self && $other"
            "todo!()"
            "todo!()"

    fn operator[!_](self: bool) -> bool
        #builtin "!$self" "" "unreachable!()"
}

struct Option<T> noref #builtin "Option<$T>" {
    // todo: need to prop generics properly through mono
    fn is_some<T>(self: Option<T> isref) -> bool #builtin "$self.is_some()" "" "unreachable!()";

    fn is_none<T>(self: Option<T> isref) -> bool #builtin "!$self.is_some()" "" "unreachable!()";

    fn none<T>() -> Option<T> #builtin "None" "" "new_none()";

    fn some<T>(v: T noref) -> Option<T> #builtin "Some($v)" "" "new_some($v)";

    fn unwrap<T>(self: Option<T> noref) -> T #builtin "$self.unwrap()" "" "";
}

fn cosine(v: std::f64) -> std::f64 #builtin "$v.cos()" "" "luma_op_cos_slow($v)";

fn print<T>(v: T) -> std::Unit #builtin "luma_print_fast($v);" "luma_print_silly" "luma_print_slow($v)";

fn panic<T>(msg: std::String) -> T #builtin "panic_with($msg)" "panic_with($msg)" "panic_with($msg)";

// This is used to take a value and "use" it so the compiler won't fold it out
fn blackhole<T>(v: T) -> i64 #builtin "luma_blackhole($v)" "" "Value::I64(luma_blackhole($v), INT_OBJ.clone())";

// requires T be a reference type
//fn none<T>() -> T #builtin "Default::default()" "" "Value::Uninhabited()";

struct Unit noref #builtin "()" {}

struct String noref #builtin "String" {
    fn operator[_+_](self: std::String, other: std::String isref) -> std::String #builtin
        "{ let mut first = $self; first.push_str($other.as_str()); first }" "" "luma_op_add_slow($self, $other)";

    // for now just support ascii
    fn head(self: String isref) -> std::u8 #builtin "$self.chars().next().unwrap() as u8" "" "luma_str_op_head($self)";

    fn tail(self: String isref) -> std::String #builtin "$self[1..].to_owned()" "" "luma_str_op_tail($self)";

    fn len(self: String isref) -> std::i64 #builtin "$self.len() as i64" "" "luma_str_op_len($self)";

    fn rand_of_len(len: i64) -> String #builtin "rand_of_len_fast($len)" "" "rand_of_len_slow($len)";
};

struct u8 noref #builtin "u8" {
    fn as_int(self: u8) -> std::i64 #builtin "$self as i64" "" "luma_u8_op_as_int($self)";
}

/*struct StringSlice noref #builtin "&str" {
    fn 
}*/

//struct LumaVec<T> #builtin 

struct Queue<T> noref #builtin "FastRefHandle<std::collections::VecDeque<$T>>" {
    fn push_back<T>(self: Queue<T> isref, val: T) #builtin "$self.borrow_mut().push_back($val)" "" "";

    fn push_front<T>(self: Queue<T> isref, val: T) #builtin "$self.borrow_mut().push_front($val)" "" "";

    fn len<T>(self: Queue<T> isref) -> i64 #builtin "$self.borrow_mut().len() as i64" "" "";

    fn pop_front<T>(self: Queue<T> isref) -> Option<T> #builtin "$self.borrow_mut().pop_front()" "" "";

    fn new<T>() -> std::Queue<T> #builtin "FastRefHandle::from_val(std::collections::VecDeque::new())" "" "luma_queue_new_slow()";
}

struct HashMap<K, V> noref #builtin "FastRefHandle<hashbrown::HashMap<$K, $V>>" {
    fn contains_key<K, V>(self: HashMap<K, V> isref, key: K isref) -> bool #builtin "$self.borrow_mut().contains_key($key)" "" ""

    fn new<K, V>() -> HashMap<K, V> #builtin "FastRefHandle::from_val(hashbrown::HashMap::new())" "" ""

    fn insert<K, V>(self: HashMap<K, V> isref, k: K, v: V) #builtin "$self.borrow_mut().insert($k, $v);" "" ""

    fn get<K, V>(self: HashMap<K, V> isref, k: K) -> Option<V> #builtin "$self.borrow_mut().get(&$k).cloned()" "" ""
}

//struct MutRef<T> 

struct Vec<T> noref #builtin "FastRefHandle<Vec<$T>>" {
    fn push<T>(self: std::Vec<T> isref, item: T) #builtin "$self.borrow_mut().push($item);" "" "luma_vec_push_slow($self, $item)"

    fn try_get<T>(self: std::Vec<T> isref, ind: std::i64) -> Option<T> #builtin "$self.borrow_mut().get($ind as usize).cloned()" "" "luma_vec_get_slow($self, $ind)"

    fn get<T>(self: std::Vec<T> isref, ind: std::i64) -> T #builtin "$self.borrow_mut().get($ind as usize).cloned().unwrap()" "" "luma_vec_get_slow($self, $ind)"

    fn pop_back<T>(self: Vec<T> isref) -> Option<T> #builtin "$self.borrow_mut().pop()" "" ""

    fn clear<T>(self: Vec<T> isref) #builtin "$self.borrow_mut().clear()" "" ""

    /*
    fn get<T>(self: std::Vec<T>, ind: std::i64) -> T {
        self.try_get(ind).unwrap()
    }
    */

    fn new<T>() -> std::Vec<T> #builtin "FastRefHandle::from_val(Vec::new())" "" "luma_vec_new_slow()"

    fn with_capacity<T>(capacity: std::i64) -> std::Vec<T> #builtin "FastRefHandle::from_val(Vec::with_capacity($capacity as usize))" "" "luma_vec_new_slow()"

    fn len<T>(self: std::Vec<T> isref) -> std::i64 #builtin "$self.borrow_mut().len() as i64" "" "luma_vec_len_slow($self)"

    fn set<T>(self: std::Vec<T> isref, index: std::i64, value: T)
        #builtin "$self.borrow_mut()[$index as usize] = $value;" "" "todo!()"
    //fn new_i64() -> std::Vec<i64> #builtin "Vec::new" "" "";
    /*fn iter<T>(self: std::Vec<T>) -> std::VecIterator<T> {
        struct std::VecIterator { over: self, cur_index: 0 }
    };*/
}

/*
// don't use, this is broken for some reason
struct ValueVec<T> noref #builtin "Vec<$T>" {
    fn push<T>(self: std::ValueVec<T>, item: T) #builtin "$self.push($item);" "" "luma_vec_push_slow($self, $item)";

    fn get<T>(self: std::ValueVec<T>, ind: std::i64) -> T #builtin "$self.get($ind as usize).cloned().unwrap()" "" "luma_vec_get_slow($self, $ind)";

    fn new<T>() -> std::ValueVec<T> #builtin "Vec::new()" "" "luma_vec_new_slow()";

    fn with_capacity<T>(capacity: std::i64) -> std::ValueVec<T> #builtin "Vec::with_capacity($capacity)" "" "luma_vec_new_slow()";

    fn len<T>(self: std::ValueVec<T>) -> std::i64 #builtin "$self.len() as i64" "" "";
}
*/


//struct VecInner noref #builtin Vec<T> {}

/*fn v(vi: VecInner) {
}*/

/*
fn funky_dyn_fields(a: std::fdf) -> std::i64 {
    //a.def = a.def;
    a.abc = 5;
    a.abc = 5 * a.abc;


    //a.def = struct std::Unit {};

    a.def = a.abc;

    //let v = a.abc;
    //a.def = v;

    a.g = struct std::fdf { b: 20 };

    a.h = "h";

    //a.g = a.g;

    a.abc
}

struct fdf isref ismod {
    var b: std::i64;
};*/


/*
fn tmain() {

    std::print("hello world");

    std::print("this is 2 + 2:");
    if true {
        std::print(2 + 2);
    }

    std::vectest3();
    std::assigntest();
    std::takes_vecs_test();
    //std::print("hello" + " " + 42.to_string());

    //let bob = std::test_dyn_fields();

    //std::check_dyn_usage(bob);
};
/*
fn vectest() -> Vec<i64> {
    Vec::new()
}
*/

fn vectest3() {
    let v = Vec::new();
    v.push(5);

    std::print(v.get(0))

    //v.push(v, "hello");
}

fn takes_vecs(a: std::Vec<i64>, b: std::Vec<i64>) {
    std::print(a.get(0) + b.get(1));
}

fn takes_vecs_test() {
    let v = std::Vec::new();
    v.push(10);
    v.push(11);

    std::takes_vecs(v, v);
}

struct A {
    var v: std::i64;
}

fn assigntest() {
    let a = 10;
    let b = 20;
    let c = a;

    let d = struct std::A { v: a };

    d.v = b;

    b = d.v;

    //if c == 0 { a } else { b } = 30;

    //
}*/

/*
struct User {
    var name: std::String;
    var age: std::i64;
}

fn test_dyn_fields() -> std::User {
    let bob = struct std::User { name: "Bob", age: 20 };

    std::print("bob's age is");
    std::print(bob.age);

    bob.married = true;

    std::print("bob marital status:");
    std::print(bob.married);

    bob.married = false;

    //bob.married = "yes";

    bob
}

struct A_Struct {
}

fn check_dyn_usage(u: User) {
    let v = struct std::A_Struct {};

    u.adsfjkl = "hi";

    //v.b = u.married;
    v.b = u.adsfjkl;

    //std::print("v.b is:");
    //std::print(v.b);
}

fn bad_dyn_usage(u: std::User) {
    //u.married = "no"
}
*/
/*
fn fibonacci(n: std::i64) -> std::i64 {
    if n == 0 {
        0
    } else if n == 1 {
        1
    } else {
        std::fibonacci(n - 1) + std::fibonacci(n - 2)
    }
};

fn fib_test() -> std::i64 {
    std::fibonacci(17)

    //struct std::Unit {}
};

fn ackermann(m: std::i64, n: std::i64) -> std::i64 {
    if m == 0 {
        n + 1
    } else if n == 0 {
        std::ackermann(m - 1, 1)
    } else {
        std::ackermann(m - 1, std::ackermann(m, n - 1))
    }
};*/

/*
struct VecOfInt {
    var v: std::Vec<std::i64>;

    fn new() -> std::VecOfInt #builtin "" "" "";
}

fn vectest2() {
    let v = std::VecOfInt::new();

    v.v.push(v.v, 10);
}
*/

/*



struct parametric<T> {
    var val: T;

    fn change<T>(self: parametric<T>, val: T) -> std::Unit {
        self.val = val;

    }
}

fn p() -> std::Unit {
    let pa = struct std::parametric { val: 4 };
    pa.change(pa, 5);

    pa.change(pa, pa.val + 3);


    std::print(pa.val);


    //std::print(pa.val);

    //struct std::Unit {}
}

fn hw() -> std::Unit {
    std::print("hello world");
};






struct fdf isref ismod {
    var b: std::i64;
};

struct sref isref ismod {
    var v: std::sref;
};

fn sref_s(s: std::sref) -> std::Unit {
};

fn funky_dyn_fields(a: std::fdf) -> std::i64 {
    //a.def = a.def;
    a.abc = 5;
    a.abc = 5 * a.abc;


    //a.def = struct std::Unit {};

    a.def = a.abc;

    a.g = struct std::fdf { b: 20 };

    //a.g = a.g;

    a.abc
}

fn fibonacci(n: std::i64) -> std::i64 {
    if n == 0 {
        0
    } else if n == 1 {
        1
    } else {
        std::fibonacci(n - 1) + std::fibonacci(n - 2)
    }
};

fn fib_test() -> std::i64 {
    std::fibonacci(17)

    //struct std::Unit {}
};

fn ackermann(m: std::i64, n: std::i64) -> std::i64 {
    if m == 0 {
        n + 1
    } else if n == 0 {
        std::ackermann(m - 1, 1)
    } else {
        std::ackermann(m - 1, std::ackermann(m, n - 1))
    }
};

fn ackermann_test() -> std::i64 {
    std::ackermann(3, 4)
};

struct huh {
    var a: std::i64;
    var b: std::i64;

    fn woo(self: std::huh) -> std::huh {
        self
    };

    fn add_dynf(self: std::huh) -> std::huh {
        self.d = 10;

        self
    };
};

fn for_loop(from: std::i64, until: std::i64) -> std::Unit {
    let b = 0;
    for(let a = from; a < until; a = a + 1) {
        b = b + 1;
    }
};

/*
fn bad_scope() -> std::Unit {
    if 1 == 2 {
        let a = 3;
        4
    } else {
        a
    }
}
*/

fn compose() -> std::huh {
    let h = struct std::huh { a: 5, b: 6 };

    h.woo(h);

    h.a = 10;

    //std::print(h.a);

    h
};

fn just_simple() -> std::i64 {
    42
}
*/


/*

struct i64 {
    fn operator[_+_](self: std::i64, other: std::i64) -> std::i64 {
        self + other
    };

    fn operator[_/_](self: std::i64, other: std::i64) -> std::i64 {
        self / other
    };

    fn operator[_-_](self: std::i64, other: std::i64) -> std::i64 {
        self - other
    };
}

struct i32 {
    fn operator[_*_](self: std::i32, other: std::i32) -> std::i32 {
        //5 + 3 / 2
        //3 / 2
        //3 + 3 / 2 - 5
        //3.operator[_+_]()
        self * other
    };

    fn incorrect_second_operand_type(a: std::i32, b: std::i64) -> std::i32 {
        a * b
        //3 / a;
    };

    fn foo(a: std::i32, b: std::i32) -> std::i32 {
        a.foo(b)
    };

    fn incorrect_return_type(a: std::i32, b: std::i32) -> std::i64 {
        a.foo(b)
    };

}

struct Wrap<T> {
    //var f: T;
}

fn w() -> std::Wrap<std::i32> {
    struct std::Wrap { }
}

struct Vec<T> {
    fn push<U>(self: std::Vec<U>, v: U) -> std::i64 {
        5
    };

    fn pop<U>(self: std::Vec<U>) -> U {
        5
    };
}

fn vecs(v: Vec<i64>) -> std::Unit {
    let v = struct std::Vec {};

    v.pop(v)
}

fn gen1<T>(v: T) -> T {
    v
};

fn gen2() -> std::Unit {
    std::gen1(struct std::Unit {})
    //gen1(5)
}
    /*fn dyn_fields() -> std::i64 {
        42.dynf
    };*/

    /*fn err_dyn_fields_1() -> std::Unit {
        let b = 42.dynf;
        struct Unit {};

        let c = b * 3;

        c
    };*/

//    fn construction() -> std::Parameterized<std::i64> {
//        struct std::Parameterized { v: 42.dynf }
//    }

//    fn construction2() -> std::Parameterized<std::i64> {
//        struct std::Parameterized { v: 42.dynf }
//    }

/*fn err_dyn_fields_2() -> std::Unit {
    42.dynf
}*/

/*fn assignment() -> std::Unit {
    let b = 5;

    b = struct std::Unit {};
}*/



mod pointers {
struct reference<T> {
    var v: T;
}
}
*/

struct RangedIterator {
    var end: i64;
    var cur: i64;
    var iter_by: i64;

    fn next(self: RangedIterator) -> i64 {
        if self.has_next() == false {
            std::panic("tried to get next from a ranged iter with no next")
        } else {
            self.cur = self.cur + self.iter_by;
            self.cur
        }
    };

    fn has_next(self: std::RangedIterator) -> bool {
        self.cur + self.iter_by < self.end
    };
};

fn range(start: i64, end: i64) -> std::RangedIterator {
    struct std::RangedIterator { cur: start, end: end, iter_by: 1 }
};

/*
struct VecIterator<T> {
    var over: Vec<T>;
    var cur_index: i64;

    fn next<T>(self: VecIterator<T>) -> T {
        let t = self.over.get(self.cur_index);
        self.cur_index = self.cur_index + 1;

        t
    };

    fn has_next<T>(self: VecIterator<T>) -> bool {
        self.cur_index < self.over.len()
    };
};
*/
