// a bnf version of this syntax will be created at a later point

Decisions:
* dereferences of reference types will be automatically applied
* macros are unplanned
* builtins:
    print(val: str)
        prints a str typed value to stdout
    eprint(val: str)
        prints a str typed value to stderr
    stringify(val: ?) -> str
        attempts to convert a value to a string
        this is defined for each type individually currently,
        and for reference types must be individually implemented and overridden

        a builtin impl is provided for type i32 and a builtin shell impl is provided for type str

    concat(v1: str, v2: str) -> str
        returns a copied str of the provided strs with the content of v1 directly followed by the content of v2

* operator overloading is 

Builtin implementation is to be accomplished by the use of "builtin" syntax in included files.
This syntax is given an example of in new_syntax_1.rsh 

All expressions are overloadable, and use the `operator_<operation>` syntax such as `operation_add`
The operators are as follows:
    as => operator_as => 'as'
        Used to typically cast an expression.
        The overloading function should return the requested type and take in the provided type
        This operation is implemented as a unary operation, even if it appears as a binary operation

    dot => operator_dot => '.'
        Used for dereference or attribute operations
        This operation is not typically overloadable at runtime (yet)

    equals => operator_equals => '='
        Used for assignment operations.
        This operation is not overloadable at runtime (yet)

    logicalor => operator_logicalor => "||"
        Used for the binary logical or operation
        The overloading function should take the value of both sides of the operation and output a boolean value

    logicaland => operator_logicaland => "&&"
        Used for the binary logical and operation
        The overloading function should take the value of both sides of the operation and output a boolean value

    cmpequal => operator_cmpequal => "=="
        Used for the binary logical equals operation
        The overloading function should take the value of both sides of the operation and output a boolean value

    cmplessthan => operator_cmplessthan => "<="
        Used for the binary logical less than operation
        The overloading function should take the value of both sides of the operation and output a boolean value

    cmpgreaterthan => operator_cmpgreaterthan => ">="
        Used for the binary logical greater than operation
        The overloading function should take the value of both sides of the operation and output a boolean value

Assignment and "mutating" operations are a rather special case. Assignment ('a = b') requires taking a by reference *as well as* b by reference.
This is actually done by making all variable usages referencing by default. Equality is handled by a builtin that
takes `&left, &right` and returns a `result` whose value is dependent on the input types.
Every variable is conceptually a reference to the type it owns, with an implicit conversion from `&type` to `type` when an operation
requests it. This is done within expressions by first resolving on the directly given type, and then if the type has a dereference
operation allowed a resolution is attempted on the dereferenced type

The `=` method is thus declared as:
    
    builtin fn equals(lhs: &i32, rhs: &i32) -> i32

With an implicit rereferencing taking place during let operations


Another approach is to make all variables be by value.

Reference types would be "a pointer by value" and value types would just be plain by-value.
This would require more complicated llvm semantics though, and would make variable reassignment within loops much more complicated.

For this reason, a by-reference (stack based) variable creation flow is selected. This requires usage of a deref operation for variable usage.

We must then split values by the typical C++ nomenclature of lval/rval, with lval being something that has "a place in memory" and can be assigned into and an rval being a "transiently held value", that is a non-placed, non-pinned value that may only exist within a register and may not be assigned into or modified directly.

An lval may be directly converted into an rval during method search by implicit insertion of deref operations. In fact, an arbitrary number of deref operations (or reference stripping operations) may be applied during said method search. The "closest" method is matched based on each argument having precedence, and then secondarily by the lowest number of dereferences required for each argument.
This bounds search more than an "optimizing" solution would.

By arbitrary choice, all variables are to be implicitly "by reference" to the type they own.
This means that for `let v: i32 = 5`, the strict type of v is `&i32` which implicitly dereferences to `i32` when an `i32` is expected.

Type impl:
    Reference types are temporarily magic in that they are "templated". They are less magic in that the templating is not generic for very long, and the instances are very quickly flattened 
